/*******************************************************************************
 * LUCKYWINGS PROPRIETARY INFORMATION
 *  
 * The information contained herein is proprietary to LuckyWings and shall not be reproduced or
 * disclosed in whole or in part or used for any design or manufacture without direct written
 * authorization from LuckyWings.
 *
 * Copyright (c) 2016 by LuckyWings. All rights reserved.
 *******************************************************************************/
package net.luckywings.mobigame.server.utils;

/**
 * 
 * @ClassName: CRCUtil
 * @author nikm
 * @date 2013-9-10
 * 
 */
public class CRCUtil {
	private static int FCS_START = 65535;
	private static int FCS_FINAL = 61624;
	private static int[] FCSTAB = { 0, 4489, 8978, 12955, 17956, 22445, 25910,
			29887, 35912, 40385, 44890, 48851, 51820, 56293, 59774, 63735,
			4225, 264, 13203, 8730, 22181, 18220, 30135, 25662, 40137, 36160,
			49115, 44626, 56045, 52068, 63999, 59510, 8450, 12427, 528, 5017,
			26406, 30383, 17460, 21949, 44362, 48323, 36440, 40913, 60270,
			64231, 51324, 55797, 12675, 8202, 4753, 792, 30631, 26158, 21685,
			17724, 48587, 44098, 40665, 36688, 64495, 60006, 55549, 51572,
			16900, 21389, 24854, 28831, 1056, 5545, 10034, 14011, 52812, 57285,
			60766, 64727, 34920, 39393, 43898, 47859, 21125, 17164, 29079,
			24606, 5281, 1320, 14259, 9786, 57037, 53060, 64991, 60502, 39145,
			35168, 48123, 43634, 25350, 29327, 16404, 20893, 9506, 13483, 1584,
			6073, 61262, 65223, 52316, 56789, 43370, 47331, 35448, 39921,
			29575, 25102, 20629, 16668, 13731, 9258, 5809, 1848, 65487, 60998,
			56541, 52564, 47595, 43106, 39673, 35696, 33800, 38273, 42778,
			46739, 49708, 54181, 57662, 61623, 2112, 6601, 11090, 15067, 20068,
			24557, 28022, 31999, 38025, 34048, 47003, 42514, 53933, 49956,
			61887, 57398, 6337, 2376, 15315, 10842, 24293, 20332, 32247, 27774,
			42250, 46211, 34328, 38801, 58158, 62119, 49212, 53685, 10562,
			14539, 2640, 7129, 28518, 32495, 19572, 24061, 46475, 41986, 38553,
			34576, 62383, 57894, 53437, 49460, 14787, 10314, 6865, 2904, 32743,
			28270, 23797, 19836, 50700, 55173, 58654, 62615, 32808, 37281,
			41786, 45747, 19012, 23501, 26966, 30943, 3168, 7657, 12146, 16123,
			54925, 50948, 62879, 58390, 37033, 33056, 46011, 41522, 23237,
			19276, 31191, 26718, 7393, 3432, 16371, 11898, 59150, 63111, 50204,
			54677, 41258, 45219, 33336, 37809, 27462, 31439, 18516, 23005,
			11618, 15595, 3696, 8185, 63375, 58886, 54429, 50452, 45483, 40994,
			37561, 33584, 31687, 27214, 22741, 18780, 15843, 11370, 7921, 3960 };

	public static byte[] makeCrcToBytes(byte[] buf) {
		String hex = encodeHex(makeCrc(buf));
		String l = hex.substring(hex.length() - 2);
		String h = hex.substring(hex.length() - 4, hex.length() - 2);
		byte[] b = new byte[2];
		b[0] = Integer.valueOf(h, 16).byteValue();
		b[1] = Integer.valueOf(l, 16).byteValue();
		return b;
	}

	public static int makeCrc(byte[] buf) {
		int crc = 0;
		crc = FCS_START;
		for (int i = 0; i < buf.length; i++) {
			crc = getFcs(crc, buf[i]);
		}
		crc ^= FCS_START;
		return crc;
	}

	public static boolean checkCrc(byte[] buf) {
		int crc = 0;
		boolean result = false;
		crc = FCS_START;

		for (int i = 0; i < buf.length; i++) {
			crc = getFcs(crc, buf[i]);
		}
		if (FCS_FINAL != crc)
			result = false;
		else {
			result = true;
		}
		return result;
	}

	public static String encodeHex(int value) {
		StringBuffer buf = new StringBuffer(4);
		String hex = Long.toString(value & 0xFFFF, 16);
		for (int i = 0; i < 4 - hex.length(); i++) {
			buf.append("0");
		}
		buf.append(Long.toString(value & 0xFFFF, 16));
		return buf.toString();
	}

	private static int getFcs(int fcs, int src) {
		int xor = 0;
		int iresult = 0;
		xor = fcs;
		xor ^= src;
		iresult = fcs >> 8 ^ FCSTAB[(xor & 0xFF)];
		return iresult;
	}

	public static void main(String[] args) {
		byte[] packageData = { 36, 36, -52, 1, 119, 107, 104, 104, 110, 106,
				54, 49, 48, 48, 49, 50, 52, 53, 48, 48, 51, 54, 52, 0, 32, 4,
				36, 0, 0, 0, 46, -1, -1, -1, 104, -50, -4, 80, 0, 0, 0, 0, 1,
				0, 1, 7, 33, 13, 33, 12, 33, 5, 33, 16, 33, 0, 0, 2, 1, 49, 10,
				6, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1,
				60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11,
				-32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32,
				78, 0, 0, 3, -13, -58, 4, -13, -56, 4, -12, -57, 5, -12, -57,
				4, -13, -58, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32,
				-117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0,
				0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1,
				60, 32, 78, 0, 0, 4, -13, -57, 5, -12, -57, 5, -12, -58, 4,
				-12, -58, 5, -12, -56, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0,
				0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60,
				32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11,
				-32, -117, 1, 60, 32, 78, 0, 0, 5, -12, -58, 4, -12, -57, 4,
				-12, -59, 5, -12, -58, 4, -13, -57, 0, 11, -32, -117, 1, 60,
				32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11,
				-32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32,
				78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 4, -13, -58,
				4, -12, -58, 4, -13, -57, 4, -13, -57, 5, -12, -58, 0, 11, -32,
				-117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0,
				0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1,
				60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 4,
				-13, -57, 4, -12, -58, 4, -13, -58, 5, -13, -56, 4, -13, -57,
				0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60,
				32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32, 78, 0, 0, 0, 11,
				-32, -117, 1, 60, 32, 78, 0, 0, 0, 11, -32, -117, 1, 60, 32,
				78, 0, 0, 4, -14, -57, 5, -12, -58, 4, -13, -58, 4, -12, -57,
				4, -12, -58, -120, 0, 0, 0 };

		byte[] crc = makeCrcToBytes(packageData);
		System.out.println(checkCrc(packageData));
		System.out.println(Integer.toHexString(crc[0]));
		System.out.println(Integer.toHexString(crc[1]));
		System.out.println(78);
		System.out.println(78);
		System.out.println(98);
		System.out.println(98);
	}
}
